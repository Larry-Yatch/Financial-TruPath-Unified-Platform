/**
 * Configuration file for Financial TruPath V2.0 Platform
 * Central configuration management for the entire system
 */

const CONFIG = {
  // Master Data Spreadsheet
  MASTER_SHEET_ID: '18qpjnCvFVYDXOAN14CKb3ceoiG6G_nIFc9n3ZO5St24',
  
  // Sheet Names in Master Spreadsheet
  SHEETS: {
    STUDENTS: 'Students',
    TOOL1_ORIENTATION: 'Tool1_Orientation',
    TOOL2_FINANCIAL_CLARITY: 'Tool2_FinancialClarity',
    TOOL3_CONTROL_FEAR: 'Tool3_ControlFear',
    TOOL4_EXTERNAL_VALIDATION: 'Tool4_ExternalValidation',
    TOOL5_FALSE_SELF: 'Tool5_FalseSelfView',
    TOOL6_ISSUES_LOVE: 'Tool6_IssuesShowingLove',
    TOOL7_FREEDOM_FRAMEWORK: 'Tool7_FreedomFramework',
    TOOL8_RETIREMENT: 'Tool8_RetirementBlueprint',
    INSIGHTS: 'CrossToolInsights',
    LOGS: 'SystemLogs'
  },
  
  // Platform Settings
  VERSION: '2.0.0',
  COURSE_START_DATE: new Date('2024-11-04'), // Update with actual date
  
  // API Keys (use Script Properties in production)
  GPT_API_KEY: PropertiesService.getScriptProperties().getProperty('GPT_API_KEY') || '',
  
  // Admin Settings
  ADMIN_EMAIL: PropertiesService.getScriptProperties().getProperty('ADMIN_EMAIL') || '',
  
  // Feature Flags
  FEATURES: {
    AUTO_SAVE: true,
    CROSS_TOOL_INTELLIGENCE: true,
    WEEKLY_LOCKS: true, // Lock tools by week
    DEBUG_MODE: false
  },
  
  // Timing Settings
  AUTO_SAVE_INTERVAL: 30000, // 30 seconds
  SESSION_TIMEOUT: 3600000, // 1 hour
  
  // Cache Settings
  CACHE_TTL: 300, // 5 minutes in seconds
  
  // URLs
  SUPPORT_URL: 'https://financialtrupath.com/support',
  PRIVACY_URL: 'https://financialtrupath.com/privacy',
  
  // Tool Availability Schedule (week numbers when tools unlock)
  TOOL_SCHEDULE: {
    'orientation': 1,
    'financial-clarity': 2,
    'control-fear': 3,
    'external-validation': 4,
    'false-self-view': 5,
    'issues-showing-love': 6,
    'freedom-framework': 7,
    'retirement-blueprint': 8
  }
};

/**
 * Get the master spreadsheet instance
 * @returns {Spreadsheet} Google Sheets spreadsheet object
 */
function getMasterSpreadsheet() {
  try {
    return SpreadsheetApp.openById(CONFIG.MASTER_SHEET_ID);
  } catch (error) {
    console.error('Error accessing master spreadsheet:', error);
    throw new Error('Unable to access master data spreadsheet. Please check permissions.');
  }
}

/**
 * Get a specific sheet from the master spreadsheet
 * @param {string} sheetName - Name of the sheet to retrieve
 * @returns {Sheet} Google Sheets sheet object
 */
function getSheet(sheetName) {
  const spreadsheet = getMasterSpreadsheet();
  let sheet = spreadsheet.getSheetByName(sheetName);
  
  if (!sheet) {
    // Create sheet if it doesn't exist
    sheet = spreadsheet.insertSheet(sheetName);
    initializeSheet(sheet, sheetName);
  }
  
  return sheet;
}

/**
 * Initialize a new sheet with headers
 * @param {Sheet} sheet - The sheet to initialize
 * @param {string} sheetName - Name of the sheet
 */
function initializeSheet(sheet, sheetName) {
  const headers = getHeadersForSheet(sheetName);
  if (headers && headers.length > 0) {
    sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
    sheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
    sheet.setFrozenRows(1);
  }
}

/**
 * Get headers for a specific sheet
 * @param {string} sheetName - Name of the sheet
 * @returns {Array} Array of header names
 */
function getHeadersForSheet(sheetName) {
  const headerMap = {
    'Students': ['Student ID', 'Email', 'First Name', 'Last Name', 'Cohort', 'Created Date', 'Last Active', 'Tools Completed'],
    'Tool1_Orientation': ['Timestamp', 'Student ID', 'Email', 'First Name', 'Last Name', 'Age', 'Income', 'Family Status', 'Location', 'Completed'],
    'Tool2_FinancialClarity': ['Timestamp', 'Student ID', 'Income Score', 'Spending Score', 'Debt Score', 'Emergency Score', 'Savings Score', 'Investment Score', 'Retirement Score', 'Insurance Score', 'Top Priorities', 'Stress Level', 'Completed'],
    'CrossToolInsights': ['Timestamp', 'Student ID', 'Insight Type', 'Source Tools', 'Pattern', 'Risk Level', 'Recommendation', 'Generated By'],
    'SystemLogs': ['Timestamp', 'Event Type', 'Student ID', 'Tool', 'Action', 'Details', 'Error']
  };
  
  return headerMap[sheetName] || ['Timestamp', 'Data'];
}

/**
 * Get current course week
 * @returns {number} Current week number of the course
 */
function getCurrentCourseWeek() {
  const now = new Date();
  const courseStart = CONFIG.COURSE_START_DATE;
  const diffTime = Math.abs(now - courseStart);
  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  const weekNumber = Math.ceil(diffDays / 7);
  return Math.max(1, weekNumber);
}

/**
 * Check if a tool is available based on current week
 * @param {string} toolId - ID of the tool to check
 * @returns {boolean} Whether the tool is available
 */
function isToolAvailable(toolId) {
  if (!CONFIG.FEATURES.WEEKLY_LOCKS) {
    return true;
  }
  
  const toolWeek = CONFIG.TOOL_SCHEDULE[toolId];
  const currentWeek = getCurrentCourseWeek();
  
  return currentWeek >= toolWeek;
}

/**
 * Log system event
 * @param {string} eventType - Type of event
 * @param {Object} details - Event details
 */
function logEvent(eventType, details) {
  try {
    const logsSheet = getSheet(CONFIG.SHEETS.LOGS);
    const row = [
      new Date(),
      eventType,
      details.studentId || '',
      details.tool || '',
      details.action || '',
      JSON.stringify(details),
      details.error || ''
    ];
    logsSheet.appendRow(row);
  } catch (error) {
    console.error('Error logging event:', error);
  }
}

/**
 * Validate configuration on startup
 */
function validateConfig() {
  const errors = [];
  
  // Check master spreadsheet access
  try {
    getMasterSpreadsheet();
  } catch (error) {
    errors.push('Cannot access master spreadsheet: ' + CONFIG.MASTER_SHEET_ID);
  }
  
  // Check required properties
  if (!CONFIG.GPT_API_KEY && CONFIG.FEATURES.CROSS_TOOL_INTELLIGENCE) {
    console.warn('GPT API Key not configured - intelligence features limited');
  }
  
  if (!CONFIG.ADMIN_EMAIL) {
    console.warn('Admin email not configured - error notifications disabled');
  }
  
  if (errors.length > 0) {
    throw new Error('Configuration errors: ' + errors.join(', '));
  }
  
  console.log('Configuration validated successfully');
  logEvent('SYSTEM_START', { version: CONFIG.VERSION });
}